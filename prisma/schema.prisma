// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String?
  email        String    @unique
  passwordHash String
  role         Role      @default(USER)
  orders       Order[]
  createdAt    DateTime  @default(now())
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  slug        String          @unique
  sku         String          @unique
  price       Decimal         @db.Decimal(10, 2)
  stock       Int             @default(0)
  description String?
  images      ProductImage[]
  categories  ProductCategory[]
  orderItems  OrderItem[]
  createdAt   DateTime        @default(now())
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  sort      Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String
  slug      String             @unique
  products  ProductCategory[]
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([productId, categoryId])
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  totalAmount Decimal      @db.Decimal(10, 2)
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  items       OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  SHIPPED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  price     Decimal @db.Decimal(10, 2)
  qty       Int
}
